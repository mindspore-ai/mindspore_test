diff --git a/src/include/robin_hood.h b/src/include/robin_hood.h
--- a/src/include/robin_hood.h
+++ b/src/include/robin_hood.h
@@ -2541,4 +2541,56 @@ using unordered_set = detail::Table<sizeof(Key) <= sizeof(size_t) * 6 &&

 } // namespace robin_hood

+namespace std {
+template <typename T1, typename T2>
+struct tuple_size<robin_hood::pair<T1, T2>> : std::integral_constant<std::size_t, 2> {};
+
+template <std::size_t I, typename T1, typename T2>
+struct tuple_element<I, robin_hood::pair<T1, T2>> {
+  typedef typename std::conditional<I == 0, T1, T2>::type type;
+};
+}  // namespace std
+
+namespace robin_hood {
+template <std::size_t I, typename T1, typename T2>
+typename std::enable_if<I == 0, T1 &>::type get(robin_hood::pair<T1, T2> &p) {
+  return p.first;
+}
+
+template <std::size_t I, typename T1, typename T2>
+typename std::enable_if<I == 1, T2 &>::type get(robin_hood::pair<T1, T2> &p) {
+  return p.second;
+}
+
+template <std::size_t I, typename T1, typename T2>
+typename std::enable_if<I == 0, const T1 &>::type get(const robin_hood::pair<T1, T2> &p) {
+  return p.first;
+}
+
+template <std::size_t I, typename T1, typename T2>
+typename std::enable_if<I == 1, const T2 &>::type get(const robin_hood::pair<T1, T2> &p) {
+  return p.second;
+}
+
+template <std::size_t I, typename T1, typename T2>
+typename std::enable_if<I == 0, T1 &&>::type get(robin_hood::pair<T1, T2> &&p) {
+  return std::move(p.first);
+}
+
+template <std::size_t I, typename T1, typename T2>
+typename std::enable_if<I == 1, T2 &&>::type get(robin_hood::pair<T1, T2> &&p) {
+  return std::move(p.second);
+}
+
+template <std::size_t I, typename T1, typename T2>
+typename std::enable_if<I == 0, const T1 &&>::type get(const robin_hood::pair<T1, T2> &&p) {
+  return std::move(p.first);
+}
+
+template <std::size_t I, typename T1, typename T2>
+typename std::enable_if<I == 1, const T2 &&>::type get(const robin_hood::pair<T1, T2> &&p) {
+  return std::move(p.second);
+}
+}  // namespace robin_hood
+
 #endif
