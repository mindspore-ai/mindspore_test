quant_matmul:
    description: |
        quant_matmul(x1, x2, scale, *, offset=None, pertoken_scale=None, bias=None, output_dtype=None, x1_dtype=None, x2_dtype=None, pertoken_scale_dtype=None, scale_dtype=None, group_sizes=None) -> Tensor

        Used for quantized matrix multiplication.

        .. warning::
            This is an experimental API that is subject to change or deletion.
            Only support on David training series.

        Args:
            x1 (Tensor): Tensor of shape :math:`(*, M, K)` . The dimension of `input` should be in [2, 6].
            x2 (Tensor): Tensor of shape :math:`(*, K, N)` . The dimension of `input` should be in [2, 6].
            scale (Tensor): Tensor of shape :math:`(T,)` . T should be equal to 1 or N, N is the last dimension of 'x2'.

        Keyword Args:
            offset (Tensor, optional): Tensor of shape :math:`(T,)` . T should be equal to 1 or N, N is the last dimension of 'x2'. Default: ``None`` .
            pertoken_scale (Tensor, optional): Tensor of shape :math:`(M,)` . M is second-to-last dimension of 'x1'. Default: ``None`` .
                a valid Tensor must deliver to `pertoken_scale` , ``None`` will cause unexpected error.
            bias (Tensor, optional): Tensor of shape :math:`(N,)` or :math:`(B, 1, N)` , N is the last dimension of 'x2'.
                if dimension of 'output' is 2, 4, 5 or 6, 'bias' must has shape :math:`(N,)` . Default: ``None`` .
            output_dtype (:class:`mindspore.dtype`, optional): the dtype of 'output'. Default: ``None`` .
            x1_dtype (:class:`mindspore.dtype`, optional): Cast 'x1' to 'x1_dtype' before calculation. Default: ``None`` .
            x2_dtype (:class:`mindspore.dtype`, optional): Cast 'x2' to 'x2_dtype' before calculation. Default: ``None`` .
            pertoken_scale_dtype (:class:`mindspore.dtype`, optional): Cast 'pertoken_scale' to 'pertoken_scale_dtype' before calculation. Default: ``None`` .
            scale_dtype (:class:`mindspore.dtype`, optional): Cast 'scale' to 'scale_dtype' before calculation. Default: ``None`` .
            group_sizes (Union[tuple(int), list(int)], optional): A sequence of int elements. Must have 3 elements. Default: ``None`` .

        Returns:
            Tensor of shape :math:`(*, M, N)` .

        Raises:
            ValueError: If dtype of `x1` is int8 or int32.

        Supported Platforms:
            ``Ascend``

        Examples:
            >>> import numpy as np
            >>> import mindspore as ms
            >>> from mindspore import ops, Tensor
            >>> x1 = Tensor(np.random.randn(2, 3, 4), ms.float8_e4m3)
            >>> x2 = Tensor(np.random.randn(2, 4, 5), ms.float8_e4m3)
            >>> scale = Tensor(np.random.randn(1,), ms.float32)
            >>> pertoken_scale = Tensor(np.random.randn(3,), ms.float32)
            >>> output = ops.auto_generate.quant_matmul(x1, x2, scale, pertoken_scale=pertoken_scale, output_dtype=ms.bfloat16)
            >>> print(output.shape)
                (2, 3, 5)
            >>> print(output.dtype)
                BFloat16
