broadcast_to:
  description: |
    broadcast_to(shape) -> Tensor
    
    Broadcasts `self` tensor to a given shape. The dim of `self` shape must be smaller
    than or equal to that of target shape. Suppose `self` shape is :math:`(x_1, x_2, ..., x_m)`,
    target shape is :math:`(*, y_1, y_2, ..., y_m)`, where :math:`*` means any additional dimension.
    The broadcast rules are as follows:

    Compare the value of :math:`x_m` and :math:`y_m`, :math:`x_{m-1}` and :math:`y_{m-1}`, ...,
    :math:`x_1` and :math:`y_1` consecutively and
    decide whether these shapes are broadcastable and what the broadcast result is.

    - If the value pairs at a specific dim are equal, then that value goes right into that dim of output shape.
      With `self` shape :math:`(2, 3)`, target shape :math:`(2, 3)` , the inferred output shape is :math:`(2, 3)`.

    - If the value pairs are unequal, there are three cases:

      - Case 1: If the value of the target shape in the dimension is -1, the value of the
        output shape in the dimension is the value of the corresponding `self` shape in the dimension.
        With `self` shape :math:`(3, 3)`, target
        shape :math:`(-1, 3)`, the output shape is :math:`(3, 3)`.

      - Case 2: If the value of target shape in the dimension is not -1, but the corresponding
        value in the `self` shape is 1, then the corresponding value of the output shape
        is that of the target shape. With `self` shape :math:`(1, 3)`, target
        shape :math:`(8, 3)`, the output shape is :math:`(8, 3)`.

      - Case 3: If the corresponding values of the two shapes do not satisfy the above cases,
        it means that broadcasting from the `self` shape to the target shape is not supported.

    So far we got the last m dims of the outshape, now focus on the first :math:`*` dims, there are
    two cases:

    - If the first :math:`*` dims of output shape does not have -1 in it, then fill the `self`
      shape with ones until their length are the same, and then refer to
      Case 2 mentioned above to calculate the output shape. With target shape :math:`(3, 1, 4, 1, 5, 9)`,
      `self` shape :math:`(1, 5, 9)`, the filled `self` shape will be :math:`(1, 1, 1, 1, 5, 9)` and thus the
      output shape is :math:`(3, 1, 4, 1, 5, 9)`.

    - If the first :math:`*` dims of output shape have -1 in it, it implies this -1 is corresponding to
      a non-existing dim so they're not broadcastable. With target shape :math:`(3, -1, 4, 1, 5, 9)`,
      `self` shape :math:`(1, 5, 9)`, instead of operating the dim-filling process first, it raises errors directly.

    Args:
        shape (tuple): The target shape to broadcast.

    Returns:
        Tensor, with the given `shape` and the same data type as `self`.

    Raises:
        TypeError: If `shape` is not a tuple.
        ValueError: If the target and `self` shapes are incompatible, or if -1 dimension in the target shape is in an invalid
                    location.

    Supported Platforms:
        ``Ascend`` ``GPU`` ``CPU``

    Examples:
        >>> import numpy as np
        >>> from mindspore import Tensor
        >>> shape = (2, 3)
        >>> x = Tensor(np.array([1, 2, 3]).astype(np.float32))
        >>> output = x.broadcast_to(shape)
        >>> print(output)
        [[1. 2. 3.]
         [1. 2. 3.]]
        >>> shape = (-1, 2)
        >>> x = Tensor(np.array([[1], [2]]).astype(np.float32))
        >>> output = x.broadcast_to(shape)
        >>> print(output)
        [[1. 1.]
         [2. 2.]]
