tile:
  description: |
    tile(dims) -> Tensor

    Replicates an tensor with given dims times.

    Note:
        On Ascend, the number of `dims` should not exceed 8, and currently does not support scenarios
        where more than 4 dimensions are repeated simultaneously.

    Args:
        dims (tuple[int]): The parameter that specifies the number of replications,
            the parameter type is tuple, and the data type is int, i.e., :math:`(y_1, y_2, ..., y_S)`.
            Only constant value is allowed.

    Returns:
        Tensor, has the same data type as the `self`. Suppose the length of `dims` is `d`,
        the dimension of `self` is `self.dim`, and the shape of `self` is :math:`(x_1, x_2, ..., x_S)`.

        - If `self.dim = d`, then the shape of their corresponding positions can be multiplied, and
        the shape of Outputs is :math:`(x_1*y_1, x_2*y_2, ..., x_S*y_S)`.
        - If `self.dim < d`, prepend 1 to the shape of `self` until their lengths are consistent.
        Such as set the shape of `self` as :math:`(1, ..., x_1, x_2, ..., x_S)`,
        then the shape of their corresponding positions can be multiplied, and the shape of Outputs is
        :math:`(1*y_1, ..., x_R*y_R, x_S*y_S)`.
        - If `self.dim > d`, prepend 1 to `dims` until their lengths are consistent. Such as set the
        `dims` as :math:`(1, ..., y_1, y_2, ..., y_S)`, then the shape of their corresponding positions
        can be multiplied, and the shape of Outputs is :math:`(x_1*1, ..., x_R*y_R, x_S*y_S)`.

    Raises:
        TypeError: If `dims` is not a tuple or not all elements are int.
        ValueError: If not all elements of `dims` are greater than or equal to 0.

    Supported Platforms:
        ``Ascend`` ``GPU`` ``CPU``

    Examples:
        >>> import mindspore
        >>> import numpy as np
        >>> from mindspore import Tensor, ops
        >>> input = Tensor(np.array([[1, 2], [3, 4]]), mindspore.float32)
        >>> dims = (2, 3)
        >>> output = input.tile(dims)
        >>> print(output)
        [[1.  2.  1.  2.  1.  2.]
        [3.  4.  3.  4.  3.  4.]
        [1.  2.  1.  2.  1.  2.]
        [3.  4.  3.  4.  3.  4.]]
        >>> dims = (2, 3, 2)
        >>> output = input.tile(dims)
        >>> print(output)
        [[[1. 2. 1. 2.]
        [3. 4. 3. 4.]
        [1. 2. 1. 2.]
        [3. 4. 3. 4.]
        [1. 2. 1. 2.]
        [3. 4. 3. 4.]]
        [[1. 2. 1. 2.]
        [3. 4. 3. 4.]
        [1. 2. 1. 2.]
        [3. 4. 3. 4.]
        [1. 2. 1. 2.]
        [3. 4. 3. 4.]]]


    .. function:: mindspore.Tensor.tile(reps) -> Tensor

    For more details, please refer to :func:`mindspore.ops.tile`.