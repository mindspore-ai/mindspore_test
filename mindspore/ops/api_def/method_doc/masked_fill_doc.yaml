masked_fill:
  description: |
    masked_fill(self, mask, value) -> Tensor
    
    Fills elements of Tensor with value where mask is True.
    The shapes of `input_x` and `mask` need to be the same or broadcastable.

    Args:
      self (Tensor): The source Tensor whose data type is one of bool, int8, int32, int64, float16, float32.
      mask (Tensor[bool]): The boolean mask.
      value (Union[Number, Tensor]): The value to fill in with, which dtype is the same as `self`.

    Returns:
      Tensor, has the same type and shape as `self`.

    Raises:
      TypeError: If dtype of `mask` is not bool.
      TypeError: If `self` or `mask` is not a Tensor.
      ValueError: If the shapes of `self` and `mask` could not be broadcast.
      TypeError: If dtype of `self` or `value` is not one of bool, int8, int32, int64, float16, float32.
      TypeError: If dtype of `value` is different from that of `self`.
      TypeError: If `value` is neither float number nor Tensor.

    Supported Platforms:
      ``Ascend`` ``GPU`` ``CPU``

    Examples:
      >>> import mindspore
      >>> import numpy as np
      >>> from mindspore import Tensor, ops
      >>> input_x = Tensor(np.array([1., 2., 3., 4.]), mindspore.float32)
      >>> mask = Tensor(np.array([True, True, False, True]), mindspore.bool_)
      >>> output = Tensor.masked_fill(input_x, mask, 0.5)  #input_x.masked_fill(mask, 0.5)
      >>> print(output)
      [0.5 0.5 3.  0.5]
