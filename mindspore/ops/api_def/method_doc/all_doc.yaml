all:
  description: |
    all(axis=None, keep_dims=False) -> Tensor
    
    Reduces a dimension of `self` by the "logical AND" of all elements in the dimension, by default. And also can
    reduce a dimension of `self` along the `axis`. Determine whether the dimensions of the output and `self` are the
    same by controlling `keep_dims`.

    Note:
        The `axis` with tensor type is only used for compatibility with older versions and is not recommended.

    Args:
        axis (Union[int, tuple(int), list(int), Tensor], optional): The dimensions to reduce.
            Suppose the rank of `self` is r, `axis` must be in the range [-r, r).
            Default: ``None`` , all dimensions are reduced.
        keep_dims (bool, optional): If ``True`` , keep these reduced dimensions and the length is 1.
            If ``False`` , don't keep these dimensions. Default: ``False`` .

    Returns:
        Tensor, the dtype is bool.

        - If `axis` is ``None`` , and `keep_dims` is ``False`` ,
          the output is a 0-D Tensor representing the "logical AND" of all elements in the `self`.
        - If `axis` is int, such as 2, and `keep_dims` is ``False`` ,
          the shape of output is :math:`(self_1, self_3, ..., self_R)`.
        - If `axis` is tuple(int) or list(int), such as (2, 3), and `keep_dims` is ``False`` ,
          the shape of output is :math:`(self_1, self_4, ..., self_R)`.
        - If `axis` is 1-D Tensor, such as [2, 3], and `keep_dims` is ``False`` ,
          the shape of output is :math:`(self_1, self_4, ..., self_R)`.

    Raises:
        TypeError: If `keep_dims` is not a bool.
        TypeError: If `axis` is not one of the following: int, tuple, list or Tensor.

    Supported Platforms:
        ``Ascend`` ``GPU`` ``CPU``

    Examples:
        >>> import numpy as np
        >>> from mindspore import Tensor
        >>> x = Tensor(np.array([[True, False], [True, True]]))
        >>> # case 1: Reduces a dimension by the "logicalAND" of all elements in the dimension.
        >>> output = Tensor.all(x, keep_dims=True)  # x.all(keep_dims=True)
        >>> print(output)
        [[False]]
        >>> print(output.shape)
        (1, 1)
        >>> # case 2: Reduces a dimension along axis 0.
        >>> output = Tensor.all(x, axis=0)  # x.all(axis=0)
        >>> print(output)
        [ True False]
        >>> # case 3: Reduces a dimension along axis 1.
        >>> output = Tensor.all(x, axis=1)  #x.all(axis=1)
        >>> print(output)
        [False True]

    .. method:: Tensor.all(dim=None, keepdim=False) -> Tensor
        :noindex:
    
    Reduces a dimension of `self` by the "logical AND" of all elements in the dimension, by default. And also can
    reduce a dimension of `self` along the `dim`. Determine whether the dimensions of the output and `self` are the
    same by controlling `keepdim`.

    Note:
        The `dim` with tensor type is only used for compatibility with older versions and is not recommended.

    Args:
        dim (Union[int, tuple(int), list(int), Tensor], optional): The dimensions to reduce.
            Suppose the rank of `self` is r, `dim` must be in the range [-r, r).
            Default: ``None`` , all dimensions are reduced.
        keepdim (bool, optional): If ``True`` , keep these reduced dimensions and the length is 1.
            If ``False`` , don't keep these dimensions. Default: ``False`` .

    Returns:
        Tensor, the dtype is bool.

        - If `dim` is ``None`` , and `keepdim` is ``False`` ,
          the output is a 0-D Tensor representing the "logical AND" of all elements in the `self`.
        - If `dim` is int, such as 2, and `keepdim` is ``False`` ,
          the shape of output is :math:`(self_1, self_3, ..., self_R)`.
        - If `dim` is tuple(int) or list(int), such as (2, 3), and `keepdim` is ``False`` ,
          the shape of output is :math:`(self_1, self_4, ..., self_R)`.
        - If `dim` is 1-D Tensor, such as [2, 3], and `keepdim` is ``False`` ,
          the shape of output is :math:`(self_1, self_4, ..., self_R)`.

    Raises:
        TypeError: If `keepdim` is not a bool.
        TypeError: If `dim` is not one of the following: int, tuple, list or Tensor.

    Supported Platforms:
        ``Ascend`` ``GPU`` ``CPU``

    Examples:
        >>> import numpy as np
        >>> from mindspore import Tensor
        >>> x = Tensor(np.array([[True, False], [True, True]]))
        >>> # case 1: Reduces a dimension by the "logicalAND" of all elements in the dimension.
        >>> output = Tensor.all(x, keepdim=True)  # x.all(keepdim=True)
        >>> print(output)
        [[False]]
        >>> print(output.shape)
        (1, 1)
        >>> # case 2: Reduces a dimension along dim 0.
        >>> output = Tensor.all(x, dim=0)  # x.all(dim=0)
        >>> print(output)
        [ True False]
        >>> # case 3: Reduces a dimension along dim 1.
        >>> output = Tensor.all(x, dim=1)  #x.all(dim=1)
        >>> print(output)
        [False True]
