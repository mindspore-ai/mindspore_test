eq:
    description: |
        eq(other) -> Tensor

        Computes the equivalence between two tensors element-wise.

        The second argument can be a number or a tensor whose shape is broadcastable with the first argument and vise versa.

        .. math::

            out_{i} =\begin{cases}
                & \text{True,    if } input_{i} = other_{i} \\
                & \text{False,   if } input_{i} \ne other_{i}
                \end{cases}

        .. note::
            - `self` and `other` comply with the implicit type conversion rules to make the data types consistent.
            - The other input must be Tensor or Scalar.
            - The shapes of the inputs can be broadcasted to each other.

        Args:
            other (Union[Tensor, Number]): The other self is a number or
                a tensor whose data type is number.

        Returns:
            Tensor, the shape is the same as the one after broadcasting, and the data type is bool.

        Raises:
            TypeError: If neither `self` nor `other` is a Tensor or number.Number.

        Supported Platforms:
            ``Ascend`` ``GPU`` ``CPU``

        Examples:
            >>> import mindspore
            >>> from mindspore import Tensor
            >>> # case 1: The shape of two inputs are different
            >>> input = Tensor([1, 2, 3], mindspore.float32)
            >>> output = input.eq(2.0)
            >>> print(output)
            [False True False]
            >>> # case 2: The shape of two inputs are the same
            >>> input = Tensor([1, 2, 3], mindspore.int32)
            >>> other = Tensor([1, 2, 4], mindspore.int32)
            >>> output = input.eq(other)
            >>> print(output)
            [ True  True False]
