grouped_matmul:
  description: |
    Group calculation matmul.

    ** Non-Quant: **

    .. math::
            y_i = x_i\times weight_i + bias_i

    ** Antiquant-Quant: **

    .. math::
            y_i = x_i\times (weight_i + antiquant\_offset_i) * antiquant\_scale_i + bias_i

    Args:
        split_item (int): Splitting input mode. Only support 0 and 3. 0 represents multiple Tensors, and 3 represents a single Tensor.
        group_type (int): The axis to be split. Only support -1 and 0. If the matrix is multiplied by A[m,k]xB[k,n]=C[m,n].
                          -1: No grouping, 0: Group on the m-axis

    Inputs:
        x (TensorList): TensorList, including 2D-6D Tensors. Supported dtypes: Float16, Float32.
                        The shape of the tensor in tensorlist is :math:`(M, N)` or :math:`(..., M, N)`.
        weight (TensorList): TensorList, include 2D-3D Tensors. Supported dtypes: Float16, Float32, int8.
                             The shape of the tensor in tensorlist is :math:`(N, K)` or :math:`(E, N, K)`.
        bias (TensorList, optional): TensorList, include 1D-2D Tensors. Supported dtypes: Float16, Float32. If not used, None.
                                     Length is the same as the weight length. The shape of the tensor is :math:`(N)` or :math:`(E, N)`.
        scale (TensorList, optional): TensorList, scale factor of quant(A8W8) parameters. Supported dtypes: Unit64.
                                      Length is the same as the weight length. Currently not supported, use None.
        offset (TensorList, optional): TensorList, offset of quant(A8W8) parameters. Supported dtypes: Float32.
                                       Length is the same as the weight length. Currently not supported, use None.
        antiquant_scale (TensorList, optional): TensorList, scale factor of antiquant(A16W8) parameters. Supported dtypes: Float16.
                                                Length is the same as the weight length. Only use in antiquant. If not used, None.
        antiquant_offset (TensorList, optional): TensorList, offset factor of antiquant(A16W8) parameters. Supported dtypes: Float16.
                                                 Length is the same as the weight length.  Only use in antiquant. If not used, None.
        group_list (Tensor, optional): Grouping positions for the M-axis of input x. Supported dtypes: Int64


        Parameter limitations 1
        =========== ============ =========== ====================================================================================================
        split_item  group_type   group_list  notes
        =========== ============ =========== ====================================================================================================
        0           -1           None        The length of x is n, tensor in x must be 2D-6D. The length of weight is n, tensor in weight must be 2D.
        3           0            1D Tensor   The length of x is 1, tensor in x must be 2D. The length of weight is 1, tensor in weight must be 3D.
                                             (group_list.shape)[0] must be equal to (weight.shape)[0]
                                             The last number in group_list needs to be equal to the 0th dimension of the shape with weight
        =========== ============ =========== ====================================================================================================

        Parameter limitations 2
        Non-quant tyep table
        =========   =========  =========  =========  =========  ================  =================   =========
        x           weight     bias       scale      offset     antiquant_scale   antiquant_offset    y
        =========   =========  =========  =========  =========  ================  =================   =========
        Float16     Float16    Float16    None       None       None              None                Float16
        =========   =========  =========  =========  =========  ================  =================   =========

        Parameter limitations 3
        Only in split_item=3, group_type=0
        =========   =========  =========  =========  =========  ================  =================   =========
        x           weight     bias       scale      offset     antiquant_scale   antiquant_offset    y
        =========   =========  =========  =========  =========  ================  =================   =========
        Float32     Float32    Float32    None       None       None              None                Float32
        =========   =========  =========  =========  =========  ================  =================   =========

    Outputs:
        y (TensorList): TensorList, include 2D Tensors. The shape of the tensor is :math:`(M, K)`.

    Raises:
        TypeError: If `split_item` is not 0 or 3.
        TypeError: If `group_type` is not -1 or 0.
        TypeError: when `split_item` is 0, `group_type` is not -1.
        TypeError: when `split_item` is 3, `group_type` is not 0.
        TypeError: when `split_item` is 3, `group_list` is None.

    Supported Platforms:
        ``Ascend``

    Examples:
        >>> import mindspore as ms
        >>> import numpy as np
        >>> from mindspore import nn, context
        >>> from mindspore.ops.auto_generate import GroupedMatmul
        >>> class Net(nn.Cell):
        ...     def __init__(self, split_item=3, group_type=0):
        ...         super(Net, self).__init__()
        ...         self.gmm = GroupedMatmul(split_item, group_type)
        ...
        ...     def construct(self, x, weight, bias, scale, offset, antiquant_scale, antiquant_offset, group_list):
        ...         result = self.gmm(x, weight, bias, scale, offset, antiquant_scale, antiquant_offset, group_list)
        ...         return result
        ...
        >>> context.set_context(device_target="Ascend", mode=ms.GRAPH_MODE)
        >>> x = [ms.Tensor(np.array([[0, 0, 0, 0],
        ...                          [1, 1, 1, 1],
        ...                          [2, 2, 2, 2],
        ...                          [2, 2, 2, 2],
        ...                          [1, 1, 1, 1],
        ...                          [1, 1, 1, 1]]), ms.float16)]
        >>> weight = [ms.Tensor(np.arange(32).reshape((4, 4, 2)), ms.float16)]
        >>> bias = None
        >>> scale = None
        >>> offset = None
        >>> antiquant_scale = None
        >>> antiquant_offset = None
        >>> group_list = ms.Tensor([1, 3, 4, 6], ms.int64)
        >>> net = Net()
        >>> output = net(x, weight, bias, scale, offset, antiquant_scale, antiquant_offset, group_list)
        >>> print(output[0])
        [[0   0  ]
         [44  48 ]
         [88  96 ]
         [152 160]
         [108 112]
         [108 112]]
