cosine_embedding_loss:
    description: |
        Creates a criterion to measure the similarity between two tensors using cosine distance.

        Given two tensors :math:`x1`, :math:`x2`, and a Tensor label :math:`y` with values 1 or -1,
        the formula is as follows:

        .. math::
            loss(x_1, x_2, y) = \begin{cases}
            1-cos(x_1, x_2), & \text{if } y = 1\\
            \max(0, cos(x_1, x_2)-margin), & \text{if } y = -1\\
            \end{cases}

        .. warning::
            This is an experimental API that is subject to change or deletion.

        Args:
            input1 (Tensor) - Tensor of shape :math:`(N, D)` or :math:`(D)`, where :math:`N` is the batch size and :math:`D` is the embedding dimension.
            input2 (Tensor) - Tensor of shape :math:`(N, D)` or :math:`(D)`, same shape and dtype as `input1`.
            target (Tensor) - Tensor of shape :math:`(N)` or :math:`()`, contains value 1 or -1.
            margin (float, optional): Should be in [-1.0, 1.0]. Default: ``0.0`` .
            reduction (str, optional): Apply specific reduction method to the output: ``'none'`` , ``'mean'`` ,
                ``'sum'`` . Default: ``'mean'`` .

                - ``'none'``: no reduction will be applied.
                - ``'mean'``: compute and return the mean of elements in the output.
                - ``'sum'``: the output elements will be summed.  

        Returns:
            Tensor or Scalar, if `reduction` is ``"none"``, its shape is the same as `target`. Otherwise, a scalar value will be returned.

        Supported Platforms:
            ``Ascend``

        Examples:
            >>> import mindspore
            >>> import numpy as np
            >>> from mindspore import Tensor, ops
            >>> input1 = Tensor(np.array([[0.3, 0.8], [0.4, 0.3]]), mindspore.float32)
            >>> input2 = Tensor(np.array([[0.4, 1.2], [-0.4, -0.9]]), mindspore.float32)
            >>> target = Tensor(np.array([1, -1]), mindspore.int32)
            >>> output = ops.cosine_embedding_loss(input1, input2, target)
            >>> print(output)
            0.0003425479