floor_mod:
  description: |
    Compute the remainder of element-wise flooring division of first input by second input.

    If two input have different data types, implicit type conversion rules are followed.
    Inputs must be two tensors or one tensor and one scalar.
    When the inputs are two tensors, their shapes must be broadcastable, and their data types cannot both be bool
    simultaneously.

    .. math::

        out_{i} =\text{floor}(x_{i} // y_{i})

    .. warning::
        - Data of input `y` should not be 0, or the maximum value of its dtype will be returned.
        - When the elements of input exceeds 2048 , the accuracy of operator cannot guarantee the requirement of
          double thousandths in the mini form.
        - Due to different architectures, the calculation results of this operator on NPU and CPU may be inconsistent.
        - If shape is expressed as :math:`(D1, D2 ..., Dn)`, then D1\*D2... \*DN<=1000000,n<=8.

    Args:
        x (Union[Tensor, Number, bool]): The first input tensor.
        y (Union[Tensor, Number, bool]): The second input tensor.

    Returns:
        Tensor.

    Supported Platforms:
        ``Ascend`` ``GPU`` ``CPU``

    Examples:
        >>> import mindspore
        >>> # case 1: Two tensors with boolean and integer data type.
        >>> input = mindspore.tensor([True, True, False])
        >>> other = mindspore.tensor([1, 2, 4])
        >>> output = mindspore.ops.floor_mod(input, other)
        >>> print(output)
        [0 1 0]
        >>>
        >>> # case 2: One tensor and one scalar.
        >>> input = mindspore.tensor([1, 2, 4])
        >>> other = mindspore.tensor(1.5)
        >>> output = mindspore.ops.floor_mod(input, other)
        >>> print(output)
        [1.  0.5 1. ]
        >>>
        >>> # case 3: When inputs have different data types, type promotion rules are followed.
        >>> input = mindspore.tensor([1, 2, 4], mindspore.int32)
        >>> other = mindspore.tensor([1.1, 2.5, -1.5], mindspore.float32)
        >>> output = mindspore.ops.floor_mod(input, other)
        >>> print(output)
        [ 1.   2.  -0.5]
