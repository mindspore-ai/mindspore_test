lin_space_ext:
    description: |
        Returns a Tensor whose value is `steps` evenly spaced in the interval `start` and `end` (including `start` and
        `end`), and the length of the output Tensor is `steps`.
    
        .. math::
            \begin{aligned}
            &step = (end - start)/(steps - 1)\\
            &output = [start, start+step, start+2*step, ... , end]
            \end{aligned}

        Inputs:
            - **start** (Union[float, int]) - Start value of interval.
              It can be a float or int number.
            - **end** (Union[float, int]) - Last value of interval.
              It can be a float or int number.
            - **steps** (int) - Number of ticks in the interval, inclusive of start and end.
                Must be positive int number.
            - **dtype** (mindspore.dtype, optional) - The output Tensor data type. Default: ``None`` , where the data type of output
                Tensor is float32.
    
        Outputs:
            Tensor, has the shape of :math:`(steps,)`, with dtype specified by `dtype`.
    
        Raises:
            TypeError: If type of `start` or dtype of `end` is not supported.
            ValueError: If `steps` is not positive integer.
    
        Supported Platforms:
            ``Ascend``
    
        Examples:
            >>> import mindspore as ms
            >>> from mindspore import ops
            >>> start = 1
            >>> end = 10
            >>> steps = 5
            >>> output = ops.auto_generate.LinSpaceExt()(start, end, steps, dtype=ms.float32)
            >>> print(output)
            [ 1.    3.25  5.5   7.75 10.  ]
