batch_mat_mul:
    description: |
        Computes matrix multiplication between two tensors by batch.

        .. math::

        \text{output}[..., :, :] = \text{matrix}(x[..., :, :]) * \text{matrix}(y[..., :, :])

        The rank of both two input tensors must be same and not less than `2`.

        Args:
            transpose_a (bool): If ``True`` , the last two dimensions of `x` is transposed before multiplication.
                Default: ``False`` .
            transpose_b (bool): If ``True`` , the last two dimensions of `y` is transposed before multiplication.
                Default: ``False`` .

        Inputs:
            - **x** (Tensor) - The first tensor to be multiplied. The shape of the tensor is :math:`(*B, N, C)`,
              where :math:`*B` represents the batch size which can be multidimensional, :math:`N` and :math:`C` are the
              size of the last two dimensions. If `transpose_a` is ``True`` , its shape must be :math:`(*B, C, N)`.
            - **y** (Tensor) - The second tensor to be multiplied. The shape of the tensor is :math:`(*B, C, M)`. If
              `transpose_b` is ``True`` , its shape must be :math:`(*B, M, C)`.

        Outputs:
            Tensor, the shape of the output tensor is :math:`(*B, N, M)`.

        Raises:
            TypeError: If `transpose_a` or `transpose_b` is not a bool.
            ValueError: If length of shape of `x` is not equal to length of shape of `y` or
                length of shape of inputs is less than 2.

        Supported Platforms:
            ``Ascend`` ``GPU`` ``CPU``

        Examples:
            >>> import mindspore
            >>> import numpy as np
            >>> from mindspore import Tensor, ops
            >>> x = Tensor(np.ones(shape=[2, 4, 1, 3]), mindspore.float32)
            >>> y = Tensor(np.ones(shape=[2, 4, 3, 4]), mindspore.float32)
            >>> batmatmul = ops.BatchMatMul()
            >>> output = batmatmul(x, y)
            >>> print(output.shape)
            (2, 4, 1, 4)
            >>> x = Tensor(np.ones(shape=[2, 4, 3, 1]), mindspore.float32)
            >>> y = Tensor(np.ones(shape=[2, 4, 3, 4]), mindspore.float32)
            >>> batmatmul = ops.BatchMatMul(transpose_a=True)
            >>> output = batmatmul(x, y)
            >>> print(output.shape)
            (2, 4, 1, 4)