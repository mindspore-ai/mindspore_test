inplace_matmul_add:
    description: |
        Fusion Operator of Transpose, Matmul, and InplaceAdd.

        .. warning::
            - This is an experimental API that is subject to change or deletion.
            - This API is only supported in Atlas A2 training series for now.
            - This API is only supported on KBK mode.

        Args:
            x (Tensor): Matrix A in matrix multiplication, with shape :math:`(k, m)` or :math:`(batch, k, m)`,
                whose type should be float16 or bfloat16.
            weight (Tensor): Matrix B in matrix multiplication, with shape :math:`(k, n)` or :math:`(batch, k, n)`,
                whose type should be float16 or bfloat16.
            C (Tensor): A Tensor acting as both input and output, with type of float32.
                It's shape should be :math:`(m, n)` or :math:`(batch, m, n)`.

        Returns:
            Tensor, has the same shape and data type as `C`.

        Raises:
            TypeError: If the dtype of `weight` is not the same as `x`.
            ValueError: If the ranks of `x` , `weight` and `C` are not the same.

        Supported Platforms:
            ``Ascend``

        Examples:
            >>> import mindspore
            >>> import numpy as np
            >>> from mindspore import Tensor, ops, nn, context
            >>> context.set_context(mode=context.GRAPH_MODE, jit_config={"jit_level": "O0"})
            >>> class Net(nn.Cell):
            ...     def construct(self, x, weight, C):
            ...        return ops.auto_generate.inplace_matmul_add_op(x, weight, C)
            >>> x = Tensor(np.random.randn(10, 20), mindspore.float16)
            >>> weight = Tensor(np.random.randn(10, 8), mindspore.float16)
            >>> C = Tensor(np.random.randn(20, 8), mindspore.float32)
            >>> output = Net()(x, weight, C)
            >>> print(output.shape)
            [20, 8]
