xlogy:
    description: |
        Computes the first input tensor multiplied by the logarithm of second input tensor element-wise.
        Returns zero when `input` is zero.

        .. math::

            out_i = input_{i}\ln{other_{i}}

        Inputs of `input` and `other` comply with the implicit type conversion rules to make the data types consistent.

        Inputs:
            - **input** (Tensor, number.Number, bool) - The first input is a number.Number or a bool or a tensor whose data
              type is `number <https://www.mindspore.cn/docs/en/master/api_python/mindspore.html#mindspore.dtype>`_ or
              `bool_ <https://www.mindspore.cn/docs/en/master/api_python/mindspore.html#mindspore.dtype>`_.
            - **other** (Tensor, number.Number, bool) - The second input is a number.Number or a bool or a tensor whose data
              type is `number <https://www.mindspore.cn/docs/en/master/api_python/mindspore.html#mindspore.dtype>`_ or
              `bool_ <https://www.mindspore.cn/docs/en/master/api_python/mindspore.html#mindspore.dtype>`_.

        Outputs:
            - **y** (Tensor) - the shape is the broadcast of `input` and `other`,
              and the data type is the one with higher precision or higher digits among the two inputs.

        Raises:
            TypeError: If `input` is not a Tensor.
            TypeError: If `other` is not a Tensor.
            ValueError: If `input` and `other` can not broadcast.

        Supported Platforms:
            ``Ascend`` ``GPU`` ``CPU``

        Examples:
            >>> import mindspore
            >>> import numpy as np
            >>> from mindspore import Tensor, ops
            >>> from mindspore.ops.auto_generate import XLogYTensor
            >>> input = Tensor(np.array([-5, 0, 4]), mindspore.float32)
            >>> other = Tensor(np.array([2, 2, 2]), mindspore.float32)
            >>> op = Xlogy()
            >>> output = op(input, other)
            >>> print(output)
            [-3.465736   0.        2.7725887]